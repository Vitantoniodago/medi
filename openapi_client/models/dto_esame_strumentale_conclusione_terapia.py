# coding: utf-8

"""
    MediHome-CloudServer

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DTOEsameStrumentaleConclusioneTerapia(BaseModel):
    """
    
    """ # noqa: E501
    id_conclusione_terapia: Optional[StrictInt] = Field(default=None, description="Richiedi o modifica identifier conclusione terapia.", alias="IDConclusioneTerapia")
    id_assistito: Optional[StrictInt] = Field(default=None, alias="IDAssistito")
    note_conclusioni: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica note conclusioni.", alias="NoteConclusioni")
    conclusioni: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica conclusioni.", alias="Conclusioni")
    consigli_terapia: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica consigli terapia.", alias="ConsigliTerapia")
    id_referto: Optional[StrictInt] = Field(default=None, alias="IDReferto")
    id_visita: Optional[StrictInt] = Field(default=None, alias="IDVisita")
    __properties: ClassVar[List[str]] = ["IDConclusioneTerapia", "IDAssistito", "NoteConclusioni", "Conclusioni", "ConsigliTerapia", "IDReferto", "IDVisita"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DTOEsameStrumentaleConclusioneTerapia from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DTOEsameStrumentaleConclusioneTerapia from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "IDConclusioneTerapia": obj.get("IDConclusioneTerapia"),
            "IDAssistito": obj.get("IDAssistito"),
            "NoteConclusioni": obj.get("NoteConclusioni"),
            "Conclusioni": obj.get("Conclusioni"),
            "ConsigliTerapia": obj.get("ConsigliTerapia"),
            "IDReferto": obj.get("IDReferto"),
            "IDVisita": obj.get("IDVisita")
        })
        return _obj


