# coding: utf-8

"""
    MediHome-CloudServer

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DTOBisogniPazienteSicurezzaSonno(BaseModel):
    """
    
    """ # noqa: E501
    alterazione_sonno: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [alterazione sonno].", alias="AlterazioneSonno")
    allettato_con_sponde: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [allettato con sponde].", alias="AllettatoConSponde")
    rischio_infezione: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [rischio infezione].", alias="RischioInfezione")
    insonnia: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica this {MediHomeCloudServer.Models.DTOBisogniPazienteSicurezzaSonno} is insonnia.", alias="Insonnia")
    infezione_in_atto: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [infezione in atto].", alias="InfezioneInAtto")
    agitazione: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica this {MediHomeCloudServer.Models.DTOBisogniPazienteSicurezzaSonno} is agitazione.", alias="Agitazione")
    malattia_contagiosa: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [malattia contagiosa].", alias="MalattiaContagiosa")
    defedamento: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica this {MediHomeCloudServer.Models.DTOBisogniPazienteSicurezzaSonno} is defedamento.", alias="Defedamento")
    sovrappeso: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica this {MediHomeCloudServer.Models.DTOBisogniPazienteSicurezzaSonno} is sovrappeso.", alias="Sovrappeso")
    rischio_caduta: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [rischio caduta].", alias="RischioCaduta")
    note: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica note.", alias="Note")
    id_analisi_bisogni_sicurezza_sonno: Optional[StrictInt] = Field(default=None, description="Richiedi o modifica identifier analisi bisogni sicurezza sonno.", alias="IDAnalisiBisogniSicurezzaSonno")
    id_assistito: Optional[StrictInt] = Field(default=None, description="Richiedi o modifica identifier assistito.", alias="IDAssistito")
    id_visita: Optional[StrictInt] = Field(default=None, alias="IDVisita")
    __properties: ClassVar[List[str]] = ["AlterazioneSonno", "AllettatoConSponde", "RischioInfezione", "Insonnia", "InfezioneInAtto", "Agitazione", "MalattiaContagiosa", "Defedamento", "Sovrappeso", "RischioCaduta", "Note", "IDAnalisiBisogniSicurezzaSonno", "IDAssistito", "IDVisita"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DTOBisogniPazienteSicurezzaSonno from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DTOBisogniPazienteSicurezzaSonno from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AlterazioneSonno": obj.get("AlterazioneSonno"),
            "AllettatoConSponde": obj.get("AllettatoConSponde"),
            "RischioInfezione": obj.get("RischioInfezione"),
            "Insonnia": obj.get("Insonnia"),
            "InfezioneInAtto": obj.get("InfezioneInAtto"),
            "Agitazione": obj.get("Agitazione"),
            "MalattiaContagiosa": obj.get("MalattiaContagiosa"),
            "Defedamento": obj.get("Defedamento"),
            "Sovrappeso": obj.get("Sovrappeso"),
            "RischioCaduta": obj.get("RischioCaduta"),
            "Note": obj.get("Note"),
            "IDAnalisiBisogniSicurezzaSonno": obj.get("IDAnalisiBisogniSicurezzaSonno"),
            "IDAssistito": obj.get("IDAssistito"),
            "IDVisita": obj.get("IDVisita")
        })
        return _obj


