# coding: utf-8

"""
    MediHome-CloudServer

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DTOEsameObiettivoGenerale(BaseModel):
    """
    
    """ # noqa: E501
    data_visita: Optional[datetime] = Field(default=None, description="Richiedi o modifica data visita.", alias="DataVisita")
    altezza: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Richiedi o modifica altezza.", alias="Altezza")
    peso: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Richiedi o modifica peso.", alias="Peso")
    bmi: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Richiedi o modifica bmi.", alias="BMI")
    stato_nutrizione: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica stato nutrizione.", alias="StatoNutrizione")
    circonferenza_addominale: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Richiedi o modifica circonferenza addominale.", alias="CirconferenzaAddominale")
    temperatura: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Richiedi o modifica temperatura.", alias="Temperatura")
    id_localizzazione_temperatura: Optional[StrictInt] = Field(default=None, description="Richiedi o modifica identifier localizzazione temperatura.", alias="IDLocalizzazioneTemperatura")
    pa_sistolica: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Richiedi o modifica pa sistolica.", alias="PASistolica")
    pa_diastolica: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Richiedi o modifica pa diastolica.", alias="PADiastolica")
    freq_respiro: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Richiedi o modifica freq respiro.", alias="FreqRespiro")
    freq_cardiaca: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Richiedi o modifica freq cardiaca.", alias="FreqCardiaca")
    id_stato_generale: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica identifier stato generale.", alias="IDStatoGenerale")
    note: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica note.", alias="Note")
    id_assistito: Optional[StrictInt] = Field(default=None, description="Richiedi o modifica identifier assistito.", alias="IDAssistito")
    id_esame_obiettivo_generale: Optional[StrictInt] = Field(default=None, description="Richiedi o modifica identifier esame obiettivo generale.", alias="IDEsameObiettivoGenerale")
    id_decubito: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica identifier decubito.", alias="IDDecubito")
    id_mucose: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica identifier mucose.", alias="IDMucose")
    id_masse_muscolari: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica identifier masse muscolari.", alias="IDMasseMuscolari")
    id_polso: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica identifier polso.", alias="IDPolso")
    id_stato_psichico: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica identifier stato psichico.", alias="IDStatoPsichico")
    id_cute: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica identifier cute.", alias="IDCute")
    id_sottocute: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica identifier sottocute.", alias="IDSottocute")
    id_lingua: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica identifier lingua.", alias="IDLingua")
    id_respiro: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica identifier respiro.", alias="IDRespiro")
    id_visita: Optional[StrictInt] = Field(default=None, alias="IDVisita")
    __properties: ClassVar[List[str]] = ["DataVisita", "Altezza", "Peso", "BMI", "StatoNutrizione", "CirconferenzaAddominale", "Temperatura", "IDLocalizzazioneTemperatura", "PASistolica", "PADiastolica", "FreqRespiro", "FreqCardiaca", "IDStatoGenerale", "Note", "IDAssistito", "IDEsameObiettivoGenerale", "IDDecubito", "IDMucose", "IDMasseMuscolari", "IDPolso", "IDStatoPsichico", "IDCute", "IDSottocute", "IDLingua", "IDRespiro", "IDVisita"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DTOEsameObiettivoGenerale from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DTOEsameObiettivoGenerale from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "DataVisita": obj.get("DataVisita"),
            "Altezza": obj.get("Altezza"),
            "Peso": obj.get("Peso"),
            "BMI": obj.get("BMI"),
            "StatoNutrizione": obj.get("StatoNutrizione"),
            "CirconferenzaAddominale": obj.get("CirconferenzaAddominale"),
            "Temperatura": obj.get("Temperatura"),
            "IDLocalizzazioneTemperatura": obj.get("IDLocalizzazioneTemperatura"),
            "PASistolica": obj.get("PASistolica"),
            "PADiastolica": obj.get("PADiastolica"),
            "FreqRespiro": obj.get("FreqRespiro"),
            "FreqCardiaca": obj.get("FreqCardiaca"),
            "IDStatoGenerale": obj.get("IDStatoGenerale"),
            "Note": obj.get("Note"),
            "IDAssistito": obj.get("IDAssistito"),
            "IDEsameObiettivoGenerale": obj.get("IDEsameObiettivoGenerale"),
            "IDDecubito": obj.get("IDDecubito"),
            "IDMucose": obj.get("IDMucose"),
            "IDMasseMuscolari": obj.get("IDMasseMuscolari"),
            "IDPolso": obj.get("IDPolso"),
            "IDStatoPsichico": obj.get("IDStatoPsichico"),
            "IDCute": obj.get("IDCute"),
            "IDSottocute": obj.get("IDSottocute"),
            "IDLingua": obj.get("IDLingua"),
            "IDRespiro": obj.get("IDRespiro"),
            "IDVisita": obj.get("IDVisita")
        })
        return _obj


