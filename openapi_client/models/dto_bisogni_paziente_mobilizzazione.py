# coding: utf-8

"""
    MediHome-CloudServer

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DTOBisogniPazienteMobilizzazione(BaseModel):
    """
    
    """ # noqa: E501
    ausilio_letto: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [ausilio letto].", alias="AusilioLetto")
    aiuto_seduta: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [aiuto seduta].", alias="AiutoSeduta")
    movimenti_volontari: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [movimenti volontari].", alias="MovimentiVolontari")
    rotazione_corpo: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [rotazione corpo].", alias="RotazioneCorpo")
    aiuto_deambulazione: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [aiuto deambulazione].", alias="AiutoDeambulazione")
    permanenza_letto_forzata: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [permanenza letto forzata].", alias="PermanenzaLettoForzata")
    disabile_allettato: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [disabile allettato].", alias="DisabileAllettato")
    mobilizzazione_strumenti: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [mobilizzazione strumenti].", alias="MobilizzazioneStrumenti")
    lesioni_ossee: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [lesioni ossee].", alias="LesioniOssee")
    lombagia_acuta: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [lombagia acuta].", alias="LombagiaAcuta")
    cervicoalgia_acuta: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [cervicoalgia acuta].", alias="CervicoalgiaAcuta")
    paraplegia: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica this {MediHomeCloudServer.Models.DTOBisogniPazienteMobilizzazione} is paraplegia.", alias="Paraplegia")
    emiplegia: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica this {MediHomeCloudServer.Models.DTOBisogniPazienteMobilizzazione} is emiplegia.", alias="Emiplegia")
    tetraplegia: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica this {MediHomeCloudServer.Models.DTOBisogniPazienteMobilizzazione} is tetraplegia.", alias="Tetraplegia")
    id_amputazione: Optional[StrictInt] = Field(default=None, description="Richiedi o modifica identifier amputazione.", alias="IDAmputazione")
    note_amputazione: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica note amputazione.", alias="NoteAmputazione")
    note: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica note.", alias="Note")
    id_analisi_bisogni_mobilizzazione: Optional[StrictInt] = Field(default=None, description="Richiedi o modifica identifier analisi bisogni mobilizzazione.", alias="IDAnalisiBisogniMobilizzazione")
    id_assistito: Optional[StrictInt] = Field(default=None, description="Richiedi o modifica identifier assistito.", alias="IDAssistito")
    id_visita: Optional[StrictInt] = Field(default=None, alias="IDVisita")
    __properties: ClassVar[List[str]] = ["AusilioLetto", "AiutoSeduta", "MovimentiVolontari", "RotazioneCorpo", "AiutoDeambulazione", "PermanenzaLettoForzata", "DisabileAllettato", "MobilizzazioneStrumenti", "LesioniOssee", "LombagiaAcuta", "CervicoalgiaAcuta", "Paraplegia", "Emiplegia", "Tetraplegia", "IDAmputazione", "NoteAmputazione", "Note", "IDAnalisiBisogniMobilizzazione", "IDAssistito", "IDVisita"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DTOBisogniPazienteMobilizzazione from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DTOBisogniPazienteMobilizzazione from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AusilioLetto": obj.get("AusilioLetto"),
            "AiutoSeduta": obj.get("AiutoSeduta"),
            "MovimentiVolontari": obj.get("MovimentiVolontari"),
            "RotazioneCorpo": obj.get("RotazioneCorpo"),
            "AiutoDeambulazione": obj.get("AiutoDeambulazione"),
            "PermanenzaLettoForzata": obj.get("PermanenzaLettoForzata"),
            "DisabileAllettato": obj.get("DisabileAllettato"),
            "MobilizzazioneStrumenti": obj.get("MobilizzazioneStrumenti"),
            "LesioniOssee": obj.get("LesioniOssee"),
            "LombagiaAcuta": obj.get("LombagiaAcuta"),
            "CervicoalgiaAcuta": obj.get("CervicoalgiaAcuta"),
            "Paraplegia": obj.get("Paraplegia"),
            "Emiplegia": obj.get("Emiplegia"),
            "Tetraplegia": obj.get("Tetraplegia"),
            "IDAmputazione": obj.get("IDAmputazione"),
            "NoteAmputazione": obj.get("NoteAmputazione"),
            "Note": obj.get("Note"),
            "IDAnalisiBisogniMobilizzazione": obj.get("IDAnalisiBisogniMobilizzazione"),
            "IDAssistito": obj.get("IDAssistito"),
            "IDVisita": obj.get("IDVisita")
        })
        return _obj


