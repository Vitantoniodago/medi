# coding: utf-8

"""
    MediHome-CloudServer

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DTOBisogniPazienteComunicazione(BaseModel):
    """
    
    """ # noqa: E501
    assenza_comunicazione: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [assenza comunicazione].", alias="AssenzaComunicazione")
    disturbi_uditivi: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [disturbi uditivi].", alias="DisturbiUditivi")
    difficolta_comunicazione: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [difficolta comunicazione].", alias="DifficoltaComunicazione")
    sordomutismo: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica this {MediHomeCloudServer.Models.DTOBisogniPazienteComunicazione} is sordomutismo.", alias="Sordomutismo")
    sensorio_obnubilato: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [sensorio obnubilato].", alias="SensorioObnubilato")
    trachestomia: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica this {MediHomeCloudServer.Models.DTOBisogniPazienteComunicazione} is trachestomia.", alias="Trachestomia")
    cecita_bilaterale: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [cecita bilaterale].", alias="CecitaBilaterale")
    stato_soporoso: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [stato soporoso].", alias="StatoSoporoso")
    portatore_lenti: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [portatore lenti].", alias="PortatoreLenti")
    stato_coma: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [stato coma].", alias="StatoComa")
    glaucoma: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica this {MediHomeCloudServer.Models.DTOBisogniPazienteComunicazione} is glaucoma.", alias="Glaucoma")
    mancanza_conoscenza_malattia: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [mancanza conoscenza malattia].", alias="MancanzaConoscenzaMalattia")
    congiuntivite: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica this {MediHomeCloudServer.Models.DTOBisogniPazienteComunicazione} is congiuntivite.", alias="Congiuntivite")
    preoccupazione_stato: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [preoccupazione stato].", alias="PreoccupazioneStato")
    otalgie: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica this {MediHomeCloudServer.Models.DTOBisogniPazienteComunicazione} is otalgie.", alias="Otalgie")
    rapporto_difficile_parenti: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [rapporto difficile parenti].", alias="RapportoDifficileParenti")
    sordita_bilaterale: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [sordita bilaterale].", alias="SorditaBilaterale")
    preoccupazione_lavoro: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [preoccupazione lavoro].", alias="PreoccupazioneLavoro")
    protesi_fonetica: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [protesi fonetica].", alias="ProtesiFonetica")
    tossicodipendenza: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica this {MediHomeCloudServer.Models.DTOBisogniPazienteComunicazione} is tossicodipendenza.", alias="Tossicodipendenza")
    protesi_acustica: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [protesi acustica].", alias="ProtesiAcustica")
    alcoldipendenza: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica this {MediHomeCloudServer.Models.DTOBisogniPazienteComunicazione} is alcoldipendenza.", alias="Alcoldipendenza")
    disturbi_linguaggio: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [disturbi linguaggio].", alias="DisturbiLinguaggio")
    stati_psicologici: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica stati psicologici.", alias="StatiPsicologici")
    alterazione_umore: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica alterazione umore.", alias="AlterazioneUmore")
    note: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica note.", alias="Note")
    id_analisi_bisogni_comunicazione: Optional[StrictInt] = Field(default=None, description="Richiedi o modifica identifier analisi bisogni comunicazione.", alias="IDAnalisiBisogniComunicazione")
    id_assistito: Optional[StrictInt] = Field(default=None, description="Richiedi o modifica identifier assistito.", alias="IDAssistito")
    id_visita: Optional[StrictInt] = Field(default=None, alias="IDVisita")
    __properties: ClassVar[List[str]] = ["AssenzaComunicazione", "DisturbiUditivi", "DifficoltaComunicazione", "Sordomutismo", "SensorioObnubilato", "Trachestomia", "CecitaBilaterale", "StatoSoporoso", "PortatoreLenti", "StatoComa", "Glaucoma", "MancanzaConoscenzaMalattia", "Congiuntivite", "PreoccupazioneStato", "Otalgie", "RapportoDifficileParenti", "SorditaBilaterale", "PreoccupazioneLavoro", "ProtesiFonetica", "Tossicodipendenza", "ProtesiAcustica", "Alcoldipendenza", "DisturbiLinguaggio", "StatiPsicologici", "AlterazioneUmore", "Note", "IDAnalisiBisogniComunicazione", "IDAssistito", "IDVisita"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DTOBisogniPazienteComunicazione from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DTOBisogniPazienteComunicazione from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AssenzaComunicazione": obj.get("AssenzaComunicazione"),
            "DisturbiUditivi": obj.get("DisturbiUditivi"),
            "DifficoltaComunicazione": obj.get("DifficoltaComunicazione"),
            "Sordomutismo": obj.get("Sordomutismo"),
            "SensorioObnubilato": obj.get("SensorioObnubilato"),
            "Trachestomia": obj.get("Trachestomia"),
            "CecitaBilaterale": obj.get("CecitaBilaterale"),
            "StatoSoporoso": obj.get("StatoSoporoso"),
            "PortatoreLenti": obj.get("PortatoreLenti"),
            "StatoComa": obj.get("StatoComa"),
            "Glaucoma": obj.get("Glaucoma"),
            "MancanzaConoscenzaMalattia": obj.get("MancanzaConoscenzaMalattia"),
            "Congiuntivite": obj.get("Congiuntivite"),
            "PreoccupazioneStato": obj.get("PreoccupazioneStato"),
            "Otalgie": obj.get("Otalgie"),
            "RapportoDifficileParenti": obj.get("RapportoDifficileParenti"),
            "SorditaBilaterale": obj.get("SorditaBilaterale"),
            "PreoccupazioneLavoro": obj.get("PreoccupazioneLavoro"),
            "ProtesiFonetica": obj.get("ProtesiFonetica"),
            "Tossicodipendenza": obj.get("Tossicodipendenza"),
            "ProtesiAcustica": obj.get("ProtesiAcustica"),
            "Alcoldipendenza": obj.get("Alcoldipendenza"),
            "DisturbiLinguaggio": obj.get("DisturbiLinguaggio"),
            "StatiPsicologici": obj.get("StatiPsicologici"),
            "AlterazioneUmore": obj.get("AlterazioneUmore"),
            "Note": obj.get("Note"),
            "IDAnalisiBisogniComunicazione": obj.get("IDAnalisiBisogniComunicazione"),
            "IDAssistito": obj.get("IDAssistito"),
            "IDVisita": obj.get("IDVisita")
        })
        return _obj


