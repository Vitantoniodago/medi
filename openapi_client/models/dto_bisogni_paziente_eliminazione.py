# coding: utf-8

"""
    MediHome-CloudServer

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DTOBisogniPazienteEliminazione(BaseModel):
    """
    
    """ # noqa: E501
    ano_preternaturale: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [ano preternaturale].", alias="AnoPreternaturale")
    proctorragia: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica this {MediHomeCloudServer.Models.DTOBisogniPazienteEliminazione} is proctorragia.", alias="Proctorragia")
    caterismo_intermittente: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [caterismo intermittente].", alias="CaterismoIntermittente")
    ritenzione_urinaria: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [ritenzione urinaria].", alias="RitenzioneUrinaria")
    catetere_vescicale: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [catetere vescicale].", alias="CatetereVescicale")
    stipsi: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica this {MediHomeCloudServer.Models.DTOBisogniPazienteEliminazione} is stipsi.", alias="Stipsi")
    dolori_addominali: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [dolori addominali].", alias="DoloriAddominali")
    tenesmo_rettale: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [tenesmo rettale].", alias="TenesmoRettale")
    drenaggio_transcutaneo: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [drenaggio transcutaneo].", alias="DrenaggioTranscutaneo")
    tenesmo_vescicale: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [tenesmo vescicale].", alias="TenesmoVescicale")
    ematuria: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica this {MediHomeCloudServer.Models.DTOBisogniPazienteEliminazione} is ematuria.", alias="Ematuria")
    ureterostomie: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica this {MediHomeCloudServer.Models.DTOBisogniPazienteEliminazione} is ureterostomie.", alias="Ureterostomie")
    id_incontinenza_fecale: Optional[StrictInt] = Field(default=None, description="Richiedi o modifica identifier incontinenza fecale.", alias="IDIncontinenzaFecale")
    id_incontenenza_urinaria: Optional[StrictInt] = Field(default=None, description="Richiedi o modifica identifier incontenenza urinaria.", alias="IDIncontenenzaUrinaria")
    note: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica note.", alias="Note")
    id_analisi_bisogni_eliminazione: Optional[StrictInt] = Field(default=None, description="Richiedi o modifica identifier analisi bisogni eliminazione.", alias="IDAnalisiBisogniEliminazione")
    id_assistito: Optional[StrictInt] = Field(default=None, description="Richiedi o modifica identifier assistito.", alias="IDAssistito")
    id_visita: Optional[StrictInt] = Field(default=None, alias="IDVisita")
    __properties: ClassVar[List[str]] = ["AnoPreternaturale", "Proctorragia", "CaterismoIntermittente", "RitenzioneUrinaria", "CatetereVescicale", "Stipsi", "DoloriAddominali", "TenesmoRettale", "DrenaggioTranscutaneo", "TenesmoVescicale", "Ematuria", "Ureterostomie", "IDIncontinenzaFecale", "IDIncontenenzaUrinaria", "Note", "IDAnalisiBisogniEliminazione", "IDAssistito", "IDVisita"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DTOBisogniPazienteEliminazione from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DTOBisogniPazienteEliminazione from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AnoPreternaturale": obj.get("AnoPreternaturale"),
            "Proctorragia": obj.get("Proctorragia"),
            "CaterismoIntermittente": obj.get("CaterismoIntermittente"),
            "RitenzioneUrinaria": obj.get("RitenzioneUrinaria"),
            "CatetereVescicale": obj.get("CatetereVescicale"),
            "Stipsi": obj.get("Stipsi"),
            "DoloriAddominali": obj.get("DoloriAddominali"),
            "TenesmoRettale": obj.get("TenesmoRettale"),
            "DrenaggioTranscutaneo": obj.get("DrenaggioTranscutaneo"),
            "TenesmoVescicale": obj.get("TenesmoVescicale"),
            "Ematuria": obj.get("Ematuria"),
            "Ureterostomie": obj.get("Ureterostomie"),
            "IDIncontinenzaFecale": obj.get("IDIncontinenzaFecale"),
            "IDIncontenenzaUrinaria": obj.get("IDIncontenenzaUrinaria"),
            "Note": obj.get("Note"),
            "IDAnalisiBisogniEliminazione": obj.get("IDAnalisiBisogniEliminazione"),
            "IDAssistito": obj.get("IDAssistito"),
            "IDVisita": obj.get("IDVisita")
        })
        return _obj


