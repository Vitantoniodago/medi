# coding: utf-8

"""
    MediHome-CloudServer

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DTOBisogniPazienteIgiene(BaseModel):
    """
    
    """ # noqa: E501
    aiuto_igiene: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [aiuto igiene].", alias="AiutoIgiene")
    strumenti_igiene: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [strumenti igiene].", alias="StrumentiIgiene")
    aiuto_bagno: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [aiuto bagno].", alias="AiutoBagno")
    bagno_letto: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [bagno letto].", alias="BagnoLetto")
    aiuto_vestizione: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [aiuto vestizione].", alias="AiutoVestizione")
    piaghe_decubito: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [piaghe decubito].", alias="PiagheDecubito")
    aiuto_doccia: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [aiuto doccia].", alias="AiutoDoccia")
    aiuto_shampoo: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [aiuto shampoo].", alias="AiutoShampoo")
    aiuto_pediluvio: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [aiuto pediluvio].", alias="AiutoPediluvio")
    aiuto_estetico: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [aiuto estetico].", alias="AiutoEstetico")
    igiene_catetere: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [igiene catetere].", alias="IgieneCatetere")
    igiene_stormie: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [igiene stormie].", alias="IgieneStormie")
    igiene_incontinenza: Optional[StrictBool] = Field(default=None, description="Richiedi o modifica un valore che indica [igiene incontinenza].", alias="IgieneIncontinenza")
    ustioni: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica ustioni.", alias="Ustioni")
    ferite: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica ferite.", alias="Ferite")
    malattie_pelle: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica malattie pelle.", alias="MalattiePelle")
    note: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica note.", alias="Note")
    id_analisi_bisogni_igiene: Optional[StrictInt] = Field(default=None, description="Richiedi o modifica identifier analisi bisogni igiene.", alias="IDAnalisiBisogniIgiene")
    id_assistito: Optional[StrictInt] = Field(default=None, description="Richiedi o modifica identifier assistito.", alias="IDAssistito")
    id_visita: Optional[StrictInt] = Field(default=None, alias="IDVisita")
    __properties: ClassVar[List[str]] = ["AiutoIgiene", "StrumentiIgiene", "AiutoBagno", "BagnoLetto", "AiutoVestizione", "PiagheDecubito", "AiutoDoccia", "AiutoShampoo", "AiutoPediluvio", "AiutoEstetico", "IgieneCatetere", "IgieneStormie", "IgieneIncontinenza", "Ustioni", "Ferite", "MalattiePelle", "Note", "IDAnalisiBisogniIgiene", "IDAssistito", "IDVisita"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DTOBisogniPazienteIgiene from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DTOBisogniPazienteIgiene from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AiutoIgiene": obj.get("AiutoIgiene"),
            "StrumentiIgiene": obj.get("StrumentiIgiene"),
            "AiutoBagno": obj.get("AiutoBagno"),
            "BagnoLetto": obj.get("BagnoLetto"),
            "AiutoVestizione": obj.get("AiutoVestizione"),
            "PiagheDecubito": obj.get("PiagheDecubito"),
            "AiutoDoccia": obj.get("AiutoDoccia"),
            "AiutoShampoo": obj.get("AiutoShampoo"),
            "AiutoPediluvio": obj.get("AiutoPediluvio"),
            "AiutoEstetico": obj.get("AiutoEstetico"),
            "IgieneCatetere": obj.get("IgieneCatetere"),
            "IgieneStormie": obj.get("IgieneStormie"),
            "IgieneIncontinenza": obj.get("IgieneIncontinenza"),
            "Ustioni": obj.get("Ustioni"),
            "Ferite": obj.get("Ferite"),
            "MalattiePelle": obj.get("MalattiePelle"),
            "Note": obj.get("Note"),
            "IDAnalisiBisogniIgiene": obj.get("IDAnalisiBisogniIgiene"),
            "IDAssistito": obj.get("IDAssistito"),
            "IDVisita": obj.get("IDVisita")
        })
        return _obj


