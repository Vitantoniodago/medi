# coding: utf-8

"""
    MediHome-CloudServer

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from openapi_client.models.dto_item_prestazioni import DTOItemPrestazioni
from openapi_client.models.dto_modello_parziale import DTOModelloParziale
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DTOPrestazione(BaseModel):
    """
    
    """ # noqa: E501
    id_prestazione: Optional[StrictInt] = Field(default=None, description="Richiedi o modifica identifier prestazione.", alias="IDPrestazione")
    id_prestazione_planning: Optional[StrictInt] = Field(default=None, description="Richiedi o modifica identifier prestazione planning.", alias="IDPrestazionePlanning")
    id_equipe: Optional[StrictInt] = Field(default=None, description="Richiedi o modifica identifier equipe.", alias="IDEquipe")
    id_pai: Optional[StrictInt] = Field(default=None, description="Richiedi o modifica identifier pai.", alias="IDPai")
    id_frequenza: Optional[StrictInt] = Field(default=None, alias="IDFrequenza")
    durata: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Richiedi o modifica durata.", alias="Durata")
    codice: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica codice.", alias="Codice")
    descrizione: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica descrizione.", alias="Descrizione")
    assistito: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica assistito.", alias="Assistito")
    inizio_prestazione: Optional[datetime] = Field(default=None, description="Richiedi o modifica inizio prestazione.", alias="InizioPrestazione")
    fine_prestazione: Optional[datetime] = Field(default=None, description="Richiedi o modifica fine prestazione.", alias="FinePrestazione")
    note_prestazione: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica note prestazione.", alias="NotePrestazione")
    id_assistito: Optional[StrictInt] = Field(default=None, description="Richiedi o modifica identifier assistito.", alias="IDAssistito")
    durata_prestazione: Optional[StrictInt] = Field(default=None, description="Richiedi o modifica durata prestazione.", alias="DurataPrestazione")
    id_modalita_ora_prestazione: Optional[StrictInt] = Field(default=None, description="Richiedi o modifica identifier modalita ora prestazione.", alias="IDModalitaOraPrestazione")
    modelli: Optional[List[DTOItemPrestazioni]] = Field(default=None, description="Richiedi o modifica modelli.", alias="Modelli")
    effettuata: Optional[StrictBool] = Field(default=None, alias="Effettuata")
    modelli_parziali: Optional[List[DTOModelloParziale]] = Field(default=None, description="Richiedi o modifica modelli parziali.", alias="ModelliParziali")
    note_tipologia_accessi: Optional[StrictStr] = Field(default=None, alias="NoteTipologiaAccessi")
    struttura_erogante: Optional[StrictStr] = Field(default=None, alias="StrutturaErogante")
    __properties: ClassVar[List[str]] = ["IDPrestazione", "IDPrestazionePlanning", "IDEquipe", "IDPai", "IDFrequenza", "Durata", "Codice", "Descrizione", "Assistito", "InizioPrestazione", "FinePrestazione", "NotePrestazione", "IDAssistito", "DurataPrestazione", "IDModalitaOraPrestazione", "Modelli", "Effettuata", "ModelliParziali", "NoteTipologiaAccessi", "StrutturaErogante"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DTOPrestazione from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in modelli (list)
        _items = []
        if self.modelli:
            for _item in self.modelli:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Modelli'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in modelli_parziali (list)
        _items = []
        if self.modelli_parziali:
            for _item in self.modelli_parziali:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ModelliParziali'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DTOPrestazione from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "IDPrestazione": obj.get("IDPrestazione"),
            "IDPrestazionePlanning": obj.get("IDPrestazionePlanning"),
            "IDEquipe": obj.get("IDEquipe"),
            "IDPai": obj.get("IDPai"),
            "IDFrequenza": obj.get("IDFrequenza"),
            "Durata": obj.get("Durata"),
            "Codice": obj.get("Codice"),
            "Descrizione": obj.get("Descrizione"),
            "Assistito": obj.get("Assistito"),
            "InizioPrestazione": obj.get("InizioPrestazione"),
            "FinePrestazione": obj.get("FinePrestazione"),
            "NotePrestazione": obj.get("NotePrestazione"),
            "IDAssistito": obj.get("IDAssistito"),
            "DurataPrestazione": obj.get("DurataPrestazione"),
            "IDModalitaOraPrestazione": obj.get("IDModalitaOraPrestazione"),
            "Modelli": [DTOItemPrestazioni.from_dict(_item) for _item in obj.get("Modelli")] if obj.get("Modelli") is not None else None,
            "Effettuata": obj.get("Effettuata"),
            "ModelliParziali": [DTOModelloParziale.from_dict(_item) for _item in obj.get("ModelliParziali")] if obj.get("ModelliParziali") is not None else None,
            "NoteTipologiaAccessi": obj.get("NoteTipologiaAccessi"),
            "StrutturaErogante": obj.get("StrutturaErogante")
        })
        return _obj


