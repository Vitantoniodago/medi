# coding: utf-8

"""
    MediHome-CloudServer

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DTOAPIUser(BaseModel):
    """
    
    """ # noqa: E501
    guid: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica unique identifier.", alias="Guid")
    user_name: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica name of the user.", alias="UserName")
    email: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica email.", alias="Email")
    password: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica password.", alias="Password")
    tipologia: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica tipologia.", alias="Tipologia")
    api_key: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica API key.", alias="APIKey")
    nome: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica nome.", alias="Nome")
    cognome: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica cognome.", alias="Cognome")
    ruolo: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica ruolo.", alias="Ruolo")
    id_tipologia: Optional[StrictInt] = Field(default=None, description="Richiedi o modifica identifier tipologia.", alias="IDTipologia")
    codice_fiscale: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica codice fiscale.", alias="CodiceFiscale")
    guid_medibox: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica unique identifier medibox.", alias="GuidMedibox")
    __properties: ClassVar[List[str]] = ["Guid", "UserName", "Email", "Password", "Tipologia", "APIKey", "Nome", "Cognome", "Ruolo", "IDTipologia", "CodiceFiscale", "GuidMedibox"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DTOAPIUser from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DTOAPIUser from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Guid": obj.get("Guid"),
            "UserName": obj.get("UserName"),
            "Email": obj.get("Email"),
            "Password": obj.get("Password"),
            "Tipologia": obj.get("Tipologia"),
            "APIKey": obj.get("APIKey"),
            "Nome": obj.get("Nome"),
            "Cognome": obj.get("Cognome"),
            "Ruolo": obj.get("Ruolo"),
            "IDTipologia": obj.get("IDTipologia"),
            "CodiceFiscale": obj.get("CodiceFiscale"),
            "GuidMedibox": obj.get("GuidMedibox")
        })
        return _obj


