# coding: utf-8

"""
    MediHome-CloudServer

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pydantic import Field
from openapi_client.models.dto_anamnesi_familiare import DTOAnamnesiFamiliare
from openapi_client.models.dto_patologica_prossima_terapie_in_atto import DTOPatologicaProssimaTerapieInAtto
from openapi_client.models.dto_patologica_prossima_ulcere_da_pressione import DTOPatologicaProssimaUlcereDaPressione
from openapi_client.models.dto_patologica_remota_interventi_pregressi import DTOPatologicaRemotaInterventiPregressi
from openapi_client.models.dto_patologica_remota_malattie import DTOPatologicaRemotaMalattie
from openapi_client.models.dto_patologica_remota_ricoveri_pregressi import DTOPatologicaRemotaRicoveriPregressi
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DTOAPIAnamnesi(BaseModel):
    """
    
    """ # noqa: E501
    anamnesi_familiare: Optional[List[DTOAnamnesiFamiliare]] = Field(default=None, alias="AnamnesiFamiliare")
    patologica_prossima_terapia: Optional[List[DTOPatologicaProssimaTerapieInAtto]] = Field(default=None, alias="PatologicaProssimaTerapia")
    patologica_prossima_ulcere: Optional[List[DTOPatologicaProssimaUlcereDaPressione]] = Field(default=None, alias="PatologicaProssimaUlcere")
    patologica_remota_interventi_pregressi: Optional[List[DTOPatologicaRemotaInterventiPregressi]] = Field(default=None, alias="PatologicaRemotaInterventiPregressi")
    patologica_remota_malattie: Optional[List[DTOPatologicaRemotaMalattie]] = Field(default=None, alias="PatologicaRemotaMalattie")
    patologica_remota_ricoveri_pregressi: Optional[List[DTOPatologicaRemotaRicoveriPregressi]] = Field(default=None, alias="PatologicaRemotaRicoveriPregressi")
    __properties: ClassVar[List[str]] = ["AnamnesiFamiliare", "PatologicaProssimaTerapia", "PatologicaProssimaUlcere", "PatologicaRemotaInterventiPregressi", "PatologicaRemotaMalattie", "PatologicaRemotaRicoveriPregressi"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DTOAPIAnamnesi from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in anamnesi_familiare (list)
        _items = []
        if self.anamnesi_familiare:
            for _item in self.anamnesi_familiare:
                if _item:
                    _items.append(_item.to_dict())
            _dict['AnamnesiFamiliare'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in patologica_prossima_terapia (list)
        _items = []
        if self.patologica_prossima_terapia:
            for _item in self.patologica_prossima_terapia:
                if _item:
                    _items.append(_item.to_dict())
            _dict['PatologicaProssimaTerapia'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in patologica_prossima_ulcere (list)
        _items = []
        if self.patologica_prossima_ulcere:
            for _item in self.patologica_prossima_ulcere:
                if _item:
                    _items.append(_item.to_dict())
            _dict['PatologicaProssimaUlcere'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in patologica_remota_interventi_pregressi (list)
        _items = []
        if self.patologica_remota_interventi_pregressi:
            for _item in self.patologica_remota_interventi_pregressi:
                if _item:
                    _items.append(_item.to_dict())
            _dict['PatologicaRemotaInterventiPregressi'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in patologica_remota_malattie (list)
        _items = []
        if self.patologica_remota_malattie:
            for _item in self.patologica_remota_malattie:
                if _item:
                    _items.append(_item.to_dict())
            _dict['PatologicaRemotaMalattie'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in patologica_remota_ricoveri_pregressi (list)
        _items = []
        if self.patologica_remota_ricoveri_pregressi:
            for _item in self.patologica_remota_ricoveri_pregressi:
                if _item:
                    _items.append(_item.to_dict())
            _dict['PatologicaRemotaRicoveriPregressi'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DTOAPIAnamnesi from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AnamnesiFamiliare": [DTOAnamnesiFamiliare.from_dict(_item) for _item in obj.get("AnamnesiFamiliare")] if obj.get("AnamnesiFamiliare") is not None else None,
            "PatologicaProssimaTerapia": [DTOPatologicaProssimaTerapieInAtto.from_dict(_item) for _item in obj.get("PatologicaProssimaTerapia")] if obj.get("PatologicaProssimaTerapia") is not None else None,
            "PatologicaProssimaUlcere": [DTOPatologicaProssimaUlcereDaPressione.from_dict(_item) for _item in obj.get("PatologicaProssimaUlcere")] if obj.get("PatologicaProssimaUlcere") is not None else None,
            "PatologicaRemotaInterventiPregressi": [DTOPatologicaRemotaInterventiPregressi.from_dict(_item) for _item in obj.get("PatologicaRemotaInterventiPregressi")] if obj.get("PatologicaRemotaInterventiPregressi") is not None else None,
            "PatologicaRemotaMalattie": [DTOPatologicaRemotaMalattie.from_dict(_item) for _item in obj.get("PatologicaRemotaMalattie")] if obj.get("PatologicaRemotaMalattie") is not None else None,
            "PatologicaRemotaRicoveriPregressi": [DTOPatologicaRemotaRicoveriPregressi.from_dict(_item) for _item in obj.get("PatologicaRemotaRicoveriPregressi")] if obj.get("PatologicaRemotaRicoveriPregressi") is not None else None
        })
        return _obj


