# coding: utf-8

"""
    MediHome-CloudServer

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DTOSVICAnagrafica(BaseModel):
    """
    DTOSVICAnagrafica
    """ # noqa: E501
    cognome: Optional[StrictStr] = Field(default=None, alias="COGNOME")
    nome: Optional[StrictStr] = Field(default=None, alias="NOME")
    sesso: Optional[StrictStr] = Field(default=None, alias="SESSO")
    data_nascita: Optional[datetime] = Field(default=None, alias="DATA_NASCITA")
    codice_istat_comune_nascita: Optional[StrictStr] = Field(default=None, alias="CODICE_ISTAT_COMUNE_NASCITA")
    codice_fiscale: Optional[StrictStr] = Field(default=None, alias="CODICE_FISCALE")
    indirizzo_residenza: Optional[StrictStr] = Field(default=None, alias="INDIRIZZO_RESIDENZA")
    codice_istat_comune_residenza: Optional[StrictStr] = Field(default=None, alias="CODICE_ISTAT_COMUNE_RESIDENZA")
    cap_residenza: Optional[StrictStr] = Field(default=None, alias="CAP_RESIDENZA")
    telefono: Optional[StrictStr] = Field(default=None, alias="TELEFONO")
    cellulare: Optional[StrictStr] = Field(default=None, alias="CELLULARE")
    email: Optional[StrictStr] = Field(default=None, alias="EMAIL")
    pec: Optional[StrictStr] = Field(default=None, alias="PEC")
    __properties: ClassVar[List[str]] = ["COGNOME", "NOME", "SESSO", "DATA_NASCITA", "CODICE_ISTAT_COMUNE_NASCITA", "CODICE_FISCALE", "INDIRIZZO_RESIDENZA", "CODICE_ISTAT_COMUNE_RESIDENZA", "CAP_RESIDENZA", "TELEFONO", "CELLULARE", "EMAIL", "PEC"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DTOSVICAnagrafica from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DTOSVICAnagrafica from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "COGNOME": obj.get("COGNOME"),
            "NOME": obj.get("NOME"),
            "SESSO": obj.get("SESSO"),
            "DATA_NASCITA": obj.get("DATA_NASCITA"),
            "CODICE_ISTAT_COMUNE_NASCITA": obj.get("CODICE_ISTAT_COMUNE_NASCITA"),
            "CODICE_FISCALE": obj.get("CODICE_FISCALE"),
            "INDIRIZZO_RESIDENZA": obj.get("INDIRIZZO_RESIDENZA"),
            "CODICE_ISTAT_COMUNE_RESIDENZA": obj.get("CODICE_ISTAT_COMUNE_RESIDENZA"),
            "CAP_RESIDENZA": obj.get("CAP_RESIDENZA"),
            "TELEFONO": obj.get("TELEFONO"),
            "CELLULARE": obj.get("CELLULARE"),
            "EMAIL": obj.get("EMAIL"),
            "PEC": obj.get("PEC")
        })
        return _obj


