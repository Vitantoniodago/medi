# coding: utf-8

"""
    MediHome-CloudServer

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from openapi_client.models.dtoapi_assistito import DTOAPIAssistito
from openapi_client.models.dtoapi_operatore import DTOAPIOperatore
from openapi_client.models.dtoapi_prestazione import DTOAPIPrestazione
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DTOAPIAttivitaEsterna(BaseModel):
    """
    
    """ # noqa: E501
    id_ordine_lavoro: Optional[StrictInt] = Field(default=None, description="Richiedi o modifica identifier ordine lavoro.", alias="IDOrdineLavoro")
    codice: Optional[StrictStr] = Field(default=None, description="Richiedi o modifica codice.", alias="Codice")
    id_turno: Optional[StrictInt] = Field(default=None, description="Richiedi o modifica identifier turno.", alias="IDTurno")
    id_sostituzione_turno: Optional[StrictInt] = Field(default=None, description="Richiedi o modifica identifier sostituzione turno.", alias="IDSostituzioneTurno")
    data_inizio: Optional[datetime] = Field(default=None, description="Richiedi o modifica data inizio.", alias="DataInizio")
    data_fine: Optional[datetime] = Field(default=None, description="Richiedi o modifica data fine.", alias="DataFine")
    assistito: Optional[DTOAPIAssistito] = Field(default=None, alias="Assistito")
    prestazioni: Optional[List[DTOAPIPrestazione]] = Field(default=None, description="Richiedi o modifica prestazioni.", alias="Prestazioni")
    operatore: Optional[DTOAPIOperatore] = Field(default=None, alias="Operatore")
    __properties: ClassVar[List[str]] = ["IDOrdineLavoro", "Codice", "IDTurno", "IDSostituzioneTurno", "DataInizio", "DataFine", "Assistito", "Prestazioni", "Operatore"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DTOAPIAttivitaEsterna from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of assistito
        if self.assistito:
            _dict['Assistito'] = self.assistito.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in prestazioni (list)
        _items = []
        if self.prestazioni:
            for _item in self.prestazioni:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Prestazioni'] = _items
        # override the default output from pydantic by calling `to_dict()` of operatore
        if self.operatore:
            _dict['Operatore'] = self.operatore.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DTOAPIAttivitaEsterna from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "IDOrdineLavoro": obj.get("IDOrdineLavoro"),
            "Codice": obj.get("Codice"),
            "IDTurno": obj.get("IDTurno"),
            "IDSostituzioneTurno": obj.get("IDSostituzioneTurno"),
            "DataInizio": obj.get("DataInizio"),
            "DataFine": obj.get("DataFine"),
            "Assistito": DTOAPIAssistito.from_dict(obj.get("Assistito")) if obj.get("Assistito") is not None else None,
            "Prestazioni": [DTOAPIPrestazione.from_dict(_item) for _item in obj.get("Prestazioni")] if obj.get("Prestazioni") is not None else None,
            "Operatore": DTOAPIOperatore.from_dict(obj.get("Operatore")) if obj.get("Operatore") is not None else None
        })
        return _obj


