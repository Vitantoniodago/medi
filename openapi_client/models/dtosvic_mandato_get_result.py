# coding: utf-8

"""
    MediHome-CloudServer

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from openapi_client.models.dtosvic_riga_mandato import DTOSVICRigaMandato
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DTOSVICMandatoGETResult(BaseModel):
    """
    DTOSVICMandatoGETResult
    """ # noqa: E501
    anno: Optional[StrictInt] = Field(default=None, alias="ANNO")
    numero: Optional[StrictInt] = Field(default=None, alias="NUMERO")
    data_operazione: Optional[datetime] = Field(default=None, alias="DataOperazione")
    causale: Optional[StrictStr] = Field(default=None, alias="CAUSALE")
    capitolo: Optional[StrictInt] = Field(default=None, alias="CAPITOLO")
    articolo: Optional[StrictInt] = Field(default=None, alias="ARTICOLO")
    importo: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="IMPORTO")
    anno_impegno: Optional[StrictInt] = Field(default=None, alias="AnnoImpegno")
    numero_impegno: Optional[StrictInt] = Field(default=None, alias="NumeroImpegno")
    competenza_residuo: Optional[StrictStr] = Field(default=None, alias="CompetenzaResiduo")
    dettaglio: Optional[List[DTOSVICRigaMandato]] = Field(default=None, alias="DETTAGLIO")
    codice_errore: Optional[StrictStr] = Field(default=None, alias="CodiceErrore")
    errore: Optional[StrictStr] = Field(default=None, alias="ERRORE")
    __properties: ClassVar[List[str]] = ["ANNO", "NUMERO", "DataOperazione", "CAUSALE", "CAPITOLO", "ARTICOLO", "IMPORTO", "AnnoImpegno", "NumeroImpegno", "CompetenzaResiduo", "DETTAGLIO", "CodiceErrore", "ERRORE"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DTOSVICMandatoGETResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dettaglio (list)
        _items = []
        if self.dettaglio:
            for _item in self.dettaglio:
                if _item:
                    _items.append(_item.to_dict())
            _dict['DETTAGLIO'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DTOSVICMandatoGETResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ANNO": obj.get("ANNO"),
            "NUMERO": obj.get("NUMERO"),
            "DataOperazione": obj.get("DataOperazione"),
            "CAUSALE": obj.get("CAUSALE"),
            "CAPITOLO": obj.get("CAPITOLO"),
            "ARTICOLO": obj.get("ARTICOLO"),
            "IMPORTO": obj.get("IMPORTO"),
            "AnnoImpegno": obj.get("AnnoImpegno"),
            "NumeroImpegno": obj.get("NumeroImpegno"),
            "CompetenzaResiduo": obj.get("CompetenzaResiduo"),
            "DETTAGLIO": [DTOSVICRigaMandato.from_dict(_item) for _item in obj.get("DETTAGLIO")] if obj.get("DETTAGLIO") is not None else None,
            "CodiceErrore": obj.get("CodiceErrore"),
            "ERRORE": obj.get("ERRORE")
        })
        return _obj


